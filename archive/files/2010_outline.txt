Introduction
+ Talk about Dorkbot
++ Meetings every other week @ Backspace, next one is December 6th, 7pm
++ PCB Group Order
+ What is Processing?
++ It's an IDE/API/Language based on Java.  
++ As a language/api, it cuts out a lot of the boilerplate code/work
that Java would normally force upon you.  Also allows one to shove
more than one class in a file.
+ What can you do with it?
++ Standalone graphics
+++ http://blog.blprnt.com/blog/blprnt/just-landed-processing-twitter-metacarta-hidden-data
+++ http://onecm.com/projects/mycelium/
++ Interactive stuff
+++ http://askken.heroku.com/ 
++ Tools
+++ One perfect cube
+ What platforms does it support?
++ Windows, Mac, Linux, Android, Web (via Processing.js)
++ Processing Renderers: Java, P2D, P3D, OpenGL, PDF
+ Resources
++ processing.org -- Main site
++ processingjs.org -- Main site for processingjs.org -- Used for web deploy
++ OpenProcessing:  Show off site: http://openprocessing.org/
++ OpenCV Processing Library -- http://ubaa.net/shared/processing/opencv/
+ Standard libraries
+ OpenGL, Serial (link to Arduino and outside world)
+ 3rd party libraries
++ OSC - http://www.sojamo.de/libraries/oscP5/
+ Simliar tools
++ Cinder -- libcinder.org
Processing Installation 
+ Local webserver access, thumbdrive, and a couple of cdroms
+ Goal:  Be able to run one of the example programs, examples: Topics/Drawing/Animator
Processing IDE walkthrough
+ Examples
+ Sketch directory concept
+ Options (changing sketch directory for source control, external editor)

Basic program stucture
setup()
draw()
width, height

Pixel manipulation
+ Draw a gradient
+ Draw a pixel bit check pattern
+ Draw bit check with pixels array (loadPixel, updatePixels)
+ Draw a fractal
http://www.scientificamerican.com/media/inline/blog/File/Dewdney_Mandelbrot.pdf
Ship it!
+ Use Export
+ Use Export Application
Break

Shape/vector api
+ Text rendering, static color, pos
+ Text rendering, changing color
+ Text rendering, mouseX/mouseY
+ Draw a circle at mouseX/mouseY with erase
+ Draw a bunch of circles with state (using arrays/MouseClicked)
+ Move the circles around with lerp
+ Draw an image as a background (replace erase with image())
Ship It!
+ Use processing.js

OpenCV
+ Installation
+ Video input
+ Camera input
++ Make note that the OpenCV object is a PImage and exposes pixels[] and that you can manipulate it.
+ Replace head with rectangle
+ Replace head with image!
+ Use MovieMaker to record output

Summary
+ Program structure
setup()
draw()
screen.width, screen.height vs. width, height
keypressed/released
mouseX, mouseY
mousepressed/released
+ Play play play!

Todo: 
Slides

Extra credit
OpenCV marker detection?
