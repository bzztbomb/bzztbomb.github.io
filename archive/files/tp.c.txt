/*
 * Tinyprime
 */
#include <avr/io.h>
#include <avr/pgmspace.h>
#include <avr/eeprom.h>

#define numberof(x) (sizeof(x)/sizeof(*(x)))

const uint16_t PROGMEM primes[] = {
    /*2,*/3,  5,  7, 11, 13, 17, 19, 23, 29,
     31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
     73, 79, 83, 89, 97,101,103,107,109,113,
    127,131,137,139,149,151,157,163,167,173,
    179,181,191,193,197,199,211,223,227,229,
    233,239,241,251,257,263,269,271,277,281,
    283,293,307,311,313,317,331,337,347,349,
    353,359,367,373,379,383,389,397,401,409,
    419,421,431,433,439,443,449,457,461,463,
    467,479,487,491,499,503,509,521,523,541,
    547,557,563,569,571,577,587,593,599,601,
    607,613,617,619,631,641,643,647,653,659,
    661,673,677,683,691,701,709,719,727,733,
    739,743,751,757,761,769,773,787,797,809,
    811,821,823,827,829,839,853,857,859,863,
    877,881,883,887,907,911,919,929,937,941,
    947,953,967,971,977,983,991,997
} ;

const uint8_t
is_prime( uint32_t n )
{
    switch (n) {
      case 0:
      case 1:   return 0;
      case 2:
      case 3:   return 1;
      default:	if (!(n & 1))
            		return 0;
		        for (uint8_t i = 0; i < numberof(primes); ++i) {
                    uint16_t p = pgm_read_word_near( primes + i );
                    if (p == n || p * p > n) break;
            		if (!(n%p)) return 0;
                }
          		return 1;
    }
}

int
main( void )
{
    __asm__( "eor r1, r1" );	// Initialize R1 === 0
    
    DDRB = _BV(PINB4);  // B4 output (LED)
    PORTB = _BV(PINB3); // Pull-up on B3

    do
        for (uint32_t bootup = 0; bootup < 1000000; ++bootup) __asm__( "nop" );
    while (!(PINB & _BV(PINB3)));

    for ( ; ; ) {
        while   (PINB & _BV(PINB3)) ;	// Wait for button down
        while (!(PINB & _BV(PINB3))) ; // Wait for button up

        for ( ; ; ) {	// Count up to next prime
            uint32_t    n = eeprom_read_dword( 0 );

            n += 1;
            eeprom_write_dword( 0, n );

            PINB = _BV(PINB4);
            for (uint16_t pulse = 1; pulse; ++pulse) __asm__( "nop" );
            PINB = _BV(PINB4);
            for (uint32_t delay = 1; delay < 200000; ++delay) __asm__( "nop" );

            if (is_prime( n )) break;
        }
    }
}
